@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject ILocalStorageService Loc
@using System.Net.Http.Headers
@inject ISnackbar SnackBar
@inject IDialogService Dialog

<EditForm Model="@u" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog TitleClass="mud-primary" DisableSidePadding="true">
        <TitleContent><MudText Typo="Typo.h6" Style="color:white">Update User</MudText></TitleContent>
        <DialogContent>
            <MudContainer Style="max-height: 600px;">
                <div>
                    <p1>Name</p1>
                    <MudTextField @bind-Value="@u.name" Clearable For="@(() => u.name)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </div><br />
                <div>
                    <p1>Username</p1>
                    <MudTextField @bind-Value="@u.username" Clearable For="@(() => u.username)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </div><br />
                <div>
                    <p1>Password</p1>
                    <MudTextField @bind-Value="@u.password" Clearable For="@(() => u.password)" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" />
                </div><br />
                <div>
                    <p1>Role</p1>
                    <MudSelect @bind-Value="u.role" For="@(() => u.role)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Admin")" />
                        <MudSelectItem Value="@("Cashier")" />
                    </MudSelect>
                </div>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Disabled="@_processing" @onclick="Submit" Variant="Variant.Filled" Color="Color.Success">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" /> <MudText Class="ms-2">Please Wait</MudText>
                }
                else
                {
                    <MudText>Apply</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>



@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public users u { get; set; } = new users();
    private bool _processing = false;
    private bool hide = false;
    bool showPass;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (showPass)
        {
            showPass = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            showPass = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
   
    public void OnValidSubmit(EditContext context)
    {

    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(u.name) && string.IsNullOrEmpty(u.username)
        && string.IsNullOrEmpty(u.password) && string.IsNullOrEmpty(u.role))
        {
            SnackBar.Add("Fill The Required Fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            try
            {
                var _u = new users
                    {
                        userID = u.userID,
                        name = u.name,
                        username = u.username,
                        password = u.password,
                        role = u.role
                    };

                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"{Nav.BaseUri}");
                    var json = JsonConvert.SerializeObject(_u);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                    client.DefaultRequestHeaders.Authorization =
                        new AuthenticationHeaderValue("Bearer", await Loc.GetItemAsStringAsync("token"));

                    HttpResponseMessage response = await client.PutAsync("api/User/UpdateUser", content);

                    if (response.IsSuccessStatusCode)
                    {
                        string contentResponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentResponse);

                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                MudDialog.Cancel();
                                SnackBar.Add("Done: Successfully Updated!", Severity.Success);
                                StateHasChanged();
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(() =>
                        {
                            SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                            StateHasChanged();
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                SnackBar.Add($"Error: {ex.Message}", Severity.Error);
                StateHasChanged();
            }
        }
    }
}


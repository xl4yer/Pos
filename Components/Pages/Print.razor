@page "/print"
@rendermode InteractiveServer
@inject JSPrintManager JSPrintManager
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ILocalStorageService Loc
@inject ISnackbar SnackBar
@using System.Net.Http.Headers

<MudDialog TitleClass="mud-primary"
           DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6"
                 Style="color:white; font-weight: bold;">
            Billing
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; padding: 10px;">
            <div style="text-align: center; font-family: monospace; font-size: 20px; line-height: 1.6;">
                <div style="padding-bottom: 10px;">
                    <h5 style="margin: 0; font-size: 16px; font-weight: bold;">
                        Total Bill
                    </h5>
                    <h5 style="margin: 0; font-size: 25px; font-weight: bold;">
                        <u>@_total</u>
                    </h5>
                </div>
                <div style="margin-top: 10px; display: flex; justify-content: space-between; align-items: center;">
                    <span>Amount</span>&nbsp;&nbsp;
                    <MudNumericField T="double"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"
                                     Value="_amount"
                                     ValueChanged="OnAmountChanged"
                                     Immediate="true"
                                     Style="width: 150px; font-family: monospace; font-size: 14px; text-align: right;" />
                </div>
                <div style="margin-top: 10px; display: flex; justify-content: space-between; align-items: center;">
                    <span>Change</span>
                    <span style="font-weight: bold;">
                        <u>@_change</u>
                    </span>
                </div>
                <div style="margin-top: 20px;padding-top: 10px;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudButton OnClick="Cancel"
                                   Variant="Variant.Text"
                                   Color="Color.Secondary"
                                   Style="font-family: monospace; font-size: 14px;">
                            Cancel
                        </MudButton>
                        <MudButton @onclick="Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Style="font-family: monospace; font-size: 14px;">
                            Submit/Enter
                        </MudButton>
                    </div>
                </div>
            </div>
        </MudContainer>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private temp[]? _t;
    private bool _processing = false;
    public double _total { get; set; } = 0;
    public double _amount { get; set; } = 0;
    public double _change { get; set; } = 0;

    private void OnAmountChanged(double value)
    {
        _amount = value;

        if (_amount > 0)
        {
            _change = _amount - _total;
        }
        else
        {
            _change = 0;
        }

        if (_change < 0)
        {
            _change = 0;
        }
    }

    public async Task Total()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Temp/Total");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                _total = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }
    private async Task TempToPurchase()
        {
        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");

                // Make sure the token is retrieved
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", await Loc.GetItemAsStringAsync("token"));

                // Send the request to trigger the stored procedure
                HttpResponseMessage response = await client.PostAsync("api/Temp/TempToPurchase", null); // No body needed

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);

                    if (i > 0)
                    {
                        DoPrint();
                        MudDialog.Close();
                        StateHasChanged();
                    }
                }
                else
                {
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task Submit()
    {
        TempToPurchase();
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    // JavaScript function to call DoSomething when Shift + P is pressed
    private async Task RegisterKeyDown()
    {
        await JS.InvokeVoidAsync("enterShortcut", DotNetObjectReference.Create(this));
    }

    private async Task EscKey()
    {
        await JS.InvokeVoidAsync("escShortcut", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ExecuteShortcut()
    {
        TempToPurchase();
    }

    [JSInvokable]
    public void ExecuteEscShortcut()
    {
        MudDialog.Close();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Total();
            await RegisterKeyDown();
        }
    }

    // An Installed Printer instance
    private InstalledPrinter MyPrinter { get; set; } = new();
    // Use default printer?
    private bool UseDefaultPrinter = true;

    // Printing...

    private async Task LoadTemp()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var response = await client.GetAsync($"api/Temp/Temp");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(1000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    _t = JsonConvert.DeserializeObject<temp[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async void DoPrint()
    {
        // Check if JSPM Client App is up and running
        if (JSPrintManager.Status == JSPMWSStatus.Open)
        {
            // Create a ClientPrintJob
            var cpj = new ClientPrintJob();
            // Set target Printer
            cpj.ClientPrinter = UseDefaultPrinter ? new DefaultPrinter() : MyPrinter;

            // Create ESC/POS commands
            char esc = (char)0x1B; // ESC byte in hex notation
            char newLine = (char)0x0A; // LF byte in hex notation
            string cmds = esc + "@"; // Initializes the printer (ESC @)

            // Set smaller font size (approximately size 8)
            cmds += esc + "!" + (char)0x01; // Condensed mode for small font size

            // Header
            cmds += "DURIAN GARDEN" + newLine;
            cmds += "Product       Qty   Price  Total" + newLine;
            cmds += "--------------------------------" + newLine;

            // Load and print products
            await LoadTemp();
            if (_t != null)
            {
                foreach (var temp in _t)
                {
                    cmds += $"{temp.name,-12} {temp.quantity,3} {temp.price,7:F2} {temp.total,7:F2}" + newLine;
                }
            }

            // Print timestamp
            cmds += newLine + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + newLine;

            // Set the RAW commands to send to the printer
            cpj.PrinterCommands = cmds;

            // Send print job
            JSPrintManager.SendClientPrintJob(cpj);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Handle OnGetPrinters event...
            JSPrintManager.OnGetPrinters += () =>
            {
                if (JSPrintManager.Printers != null &&
                    JSPrintManager.Printers.Length > 0)
                {
                    // Display installed printers...
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No printers found...");
                }

            };

            // Handle OnStatusChanged event to detect any WSS status change
            JSPrintManager.OnStatusChanged += () =>
            {
                StateHasChanged();

                // Status = Open means that JSPM Client App is up and running!
                if (JSPrintManager.Status == JSPMWSStatus.Open)
                {
                    //Try getting local printers...
                    JSPrintManager.TryGetPrinters();
                }
            };

            // Start WebSocket comm
            JSPrintManager.Start();
        }

        base.OnAfterRender(firstRender);
    }
}

@page "/print"
@rendermode InteractiveServer
@inject JSPrintManager JSPrintManager
@inject IJSRuntime JS
@inject NavigationManager Nav

<div>
    <strong>JSPM </strong><span>WebSocket Status </span>

    @if (JSPrintManager.Status == JSPMWSStatus.Open)
    {
        <span class="badge badge-success">
            <i class="fa fa-check" /> Open
        </span>
    }
    else if (JSPrintManager.Status == JSPMWSStatus.Closed)
    {
        <span class="badge badge-danger">
            <i class="fa fa-exclamation-circle" /> Closed!
        </span>
        <div>
            <strong>JSPrintManager (JSPM) App</strong> is not installed or not running! <a href="https://neodynamic.com/downloads/jspm" target="_blank">Download JSPM Client App...</a>
        </div>
    }
    else if (JSPrintManager.Status == JSPMWSStatus.Blocked)
    {
        <span class="badge badge-warning">
            <i class="fa fa-times-circle" /> This Website is Blocked!
        </span>
    }
    else if (JSPrintManager.Status == JSPMWSStatus.WaitingForUserResponse)
    {
        <span class="badge badge-warning">
            <i class="fa fa-user-circle" /> Waiting for user response...
        </span>
    }
</div>

@if (JSPrintManager.Status == JSPMWSStatus.Open)
{
    @if (JSPrintManager.Printers == null)
    {
        <hr />
        <div class="spinner-border text-info" role="status">
            <span class="sr-only">Please wait...</span>
        </div>
        <strong><em>Getting local printers...</em></strong>
    }
    else
    {
        <div>
           
            <input type="button" value="Print Now..." @onclick="DoPrint" />
        </div>
    }
}


@code {

    // JavaScript function to call DoSomething when Shift + P is pressed
    private async Task RegisterKeyDown()
    {
        await JS.InvokeVoidAsync("registerShortcut", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ExecuteShortcut()
    {
        DoPrint();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RegisterKeyDown();
        }
    }

    // An Installed Printer instance
    private InstalledPrinter MyPrinter { get; set; } = new();
    // Use default printer?
    private bool UseDefaultPrinter = true;

    // Printing...
    private products[]? p;
    private async Task LoadProduct()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var response = await client.GetAsync($"api/Product/Products");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(1000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    p = JsonConvert.DeserializeObject<products[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async void DoPrint()
    {
        // Status = Open means that JSPM Client App is up and running!
        if (JSPrintManager.Status == JSPMWSStatus.Open)
        {
            // Create a ClientPrintJob
            var cpj = new ClientPrintJob();
            // Set target Printer
            cpj.ClientPrinter = UseDefaultPrinter ? new DefaultPrinter() : MyPrinter;
            // Create ESC/POS commands for sample label
            var esc = (char)0x1B; // ESC byte in hex notation
            var newLine = (char)0x0A; // LF byte in hex notation
            var cmds = esc + "@"; // Initializes the printer (ESC @)

            // Set smaller font size (approximately size 8)
            cmds += esc + "!" + (char)0x01; // Condensed mode for small font size

            // Header
            cmds += "DURIAN GARDEN";
            cmds += newLine;
            await LoadProduct();
            if (p != null)
            {
                foreach (var product in p)
                {
                    cmds += $"{product.name} {product.price:F2}";
                    cmds += newLine;
                }
            }
            cmds += $"{DateTime.Now}";
            // Set the RAW commands to send to the printer...
            cpj.PrinterCommands = cmds;
            // PRINT IT!!!
            JSPrintManager.SendClientPrintJob(cpj);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Handle OnGetPrinters event...
            JSPrintManager.OnGetPrinters += () =>
            {
                if (JSPrintManager.Printers != null &&
                    JSPrintManager.Printers.Length > 0)
                {
                    // Display installed printers...
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No printers found...");
                }

            };

            // Handle OnStatusChanged event to detect any WSS status change
            JSPrintManager.OnStatusChanged += () =>
            {
                StateHasChanged();

                // Status = Open means that JSPM Client App is up and running!
                if (JSPrintManager.Status == JSPMWSStatus.Open)
                {
                    //Try getting local printers...
                    JSPrintManager.TryGetPrinters();
                }
            };

            // Start WebSocket comm
            JSPrintManager.Start();
        }

        base.OnAfterRender(firstRender);
    }
}

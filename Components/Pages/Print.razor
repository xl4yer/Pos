@page "/print"
@rendermode InteractiveServer
@inject JSPrintManager JSPrintManager
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ILocalStorageService Loc
@inject ISnackbar SnackBar
@using System.Net.Http.Headers

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white; font-weight: bold;">Billing</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; padding: 10px;">
            <div style="text-align: center; font-family: monospace; font-size: 20px; line-height: 1.6;">
                <div style="padding-bottom: 10px;">
                    <h5 style="margin: 0; font-size: 16px; font-weight: bold;">Total Bill</h5>
                    <h5 style="margin: 0; font-size: 25px; font-weight: bold;"><u>@_total</u></h5>
                </div>
                <div style="margin-top: 10px; display: flex; justify-content: space-between; align-items: center;">
                    <span>Amount</span>&nbsp;&nbsp;
                    <MudNumericField T="double" Variant="Variant.Outlined" Margin="Margin.Dense" Value="_amount" ValueChanged="OnAmountChanged" Immediate="true" Style="width: 150px; font-family: monospace; font-size: 14px; text-align: right;" />
                </div>
                <div style="margin-top: 10px; display: flex; justify-content: space-between; align-items: center;">
                    <span>Change</span><span style="font-weight: bold;"><u>@_change</u></span>
                </div>
                <div style="margin-top: 20px;padding-top: 10px;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Secondary" Style="font-family: monospace; font-size: 14px;">Cancel</MudButton>
                        <MudButton Disabled="@_processing" OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Submit</MudText>
                            }
                        </MudButton>
                    </div>
                </div>
            </div>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private temp[]? _t;
    private bool _processing = false;
    public double _total { get; set; } = 0;
    public double _amount { get; set; } = 0;
    public double _change { get; set; } = 0;

    private async Task Submit()
    {
        _processing = true;
        DoPrint();
        await Task.Delay(5000);
        await TempToPurchase();
    }

    private void OnAmountChanged(double value)
    {
        _amount = value;

        if (_amount > 0)
        {
            _change = _amount - _total;
        }
        else
        {
            _change = 0;
        }

        if (_change < 0)
        {
            _change = 0;
        }
    }

    public async Task Total()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Temp/Total");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                _total = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }

    private async Task TempToPurchase()
    { 
        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", await Loc.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PostAsync("api/Temp/TempToPurchase", null);
                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);
                    if (i > 0)
                    {
                        MudDialog.Close();
                        StateHasChanged();
                    }
                }
                else
                {
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Total();
        }
    }

    private async Task LoadTemp()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var response = await client.GetAsync($"api/Temp/Temp");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(1000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    _t = JsonConvert.DeserializeObject<temp[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private InstalledPrinter MyPrinter { get; set; } = new();
    private bool UseDefaultPrinter = true;
    private string AbbreviateName(string name)
    {
        // Limit the name to a maximum of 12 characters
        if (name.Length > 12)
        {
            // Split the name into words
            var words = name.Split(' ');

            if (words.Length > 1)
            {
                // Keep the first word fully
                string abbreviatedName = words[0];

                // Shorten the second word to only a few consonants
                var secondWord = words[1];
                string shortenedSecondWord = new string(secondWord.Where(c => "aeiouAEIOU".IndexOf(c) == -1).Take(4).ToArray());  // Keep only consonants and limit to 4 characters

                abbreviatedName += " " + shortenedSecondWord;

                return abbreviatedName.Length > 12 ? abbreviatedName.Substring(0, 12) : abbreviatedName;
            }
            else
            {
                // If there's only one word, return the first 12 characters
                return name.Substring(0, 12);
            }
        }
        return name;
    }

    private async void DoPrint()
    {
        if (JSPrintManager.Status == JSPMWSStatus.Open)
        {
            var cpj = new ClientPrintJob();
            cpj.ClientPrinter = UseDefaultPrinter ? new DefaultPrinter() : MyPrinter;

            char esc = (char)0x1B;
            char newLine = (char)0x0A;
            string cmds = esc + "@";

            cmds += esc + "!" + (char)0x01;

            cmds += "DURIAN GARDEN" + newLine;
            cmds += "Product     Qty  Price  Subtotal" + newLine;
            cmds += "--------------------------------" + newLine;

            await LoadTemp();
            if (_t != null)
            {
                foreach (var temp in _t)
                {
                    string abbreviatedName = AbbreviateName(temp.name);
                    cmds += $"{abbreviatedName,-12} {temp.quantity,3} {temp.price,7:F2} {temp.total,7:F2}" + newLine;
                }
                cmds += "--------------------------------" + newLine;
                cmds += $"Total: ₱{_total,7:F2}" + newLine;
            }

            cmds += newLine + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + newLine;

            cpj.PrinterCommands = cmds;

            JSPrintManager.SendClientPrintJob(cpj);
        }
    }



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSPrintManager.OnGetPrinters += () =>
            {
                if (JSPrintManager.Printers != null &&
                    JSPrintManager.Printers.Length > 0)
                {
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No printers found...");
                }
            };

            JSPrintManager.OnStatusChanged += () =>
            {
                StateHasChanged();

                if (JSPrintManager.Status == JSPMWSStatus.Open)
                {
                    JSPrintManager.TryGetPrinters();
                }
            };

            JSPrintManager.Start();
        }

        base.OnAfterRender(firstRender);
    }
}

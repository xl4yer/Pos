@page "/counter"
@layout Components.Layout.LoginLayout
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject ILocalStorageService Loc
@using System.Net.Http.Headers
@inject JSPrintManager JSPrintManager
@inject IJSRuntime JS
@inject ISnackbar SnackBar

<PageTitle>Counter</PageTitle>

<style>
    /* Custom CSS for mobile view */
    @@media (max-width: 767px) {
        .container .row {
            --bs-gutter-x: 1rem;
            --bs-gutter-y: 1rem;
        }

            .container .row > .col {
                flex: 0 0 auto;
                width: 100%;
            }
    }

    /* General Styles */
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

    .card-img-top {
        height: 180px;
        object-fit: cover;
        border-radius: 10px 10px 0 0;
    }

    .card-body {
        padding: 1rem;
        background-color: #f9f9f9;
        border-radius: 0 0 10px 10px;
    }

    .card-title {
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .card-subtitle {
        font-size: 12px;
        color: #777;
    }

    .price {
        font-size: 14px;
        font-weight: bold;
        color: #e74c3c;
    }

    .chip {
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 12px;
    }

    /* Table Styling */
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f1f1f1;
            color: #333;
        }

        .table td {
            background-color: #fff;
            color: #555;
        }

    .table-responsive {
        max-width: 100%;
        overflow-x: auto;
    }

    .mt-5 {
        margin-top: 2rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .text-center {
        text-align: center;
    }

    /* Center the loader */
    .loader-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Ensure loader appears above other content */
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Responsive for mobile and small devices */
    @@media (max-width: 600px) {
        .card-body {
            padding: 0.75rem;
        }

        .card-title {
            font-size: 14px;
        }

        .price {
            font-size: 12px;
        }
    }
    /*Logout icon*/
    img {
        width: 35px;
        border-radius: 50px;
        float: left;
    }

    .logout {
        font-size: .8em;
        font-family: 'Oswald', sans-serif;
        position: relative;
        right: -18px;
        bottom: -10px;
        overflow: hidden;
        letter-spacing: 3px;
        opacity: 0;
        transition: opacity .45s;
        -webkit-transition: opacity .35s;
        color: white;
    }

    .button {
        text-decoration: none;
        float: right;
        padding: 12px;
        margin: 15px;
        color: white;
        width: 50px;
        transition: width .35s;
        -webkit-transition: width .35s;
        overflow: hidden;
    }

    a:hover {
        width: 130px;
    }

        a:hover .logout {
            opacity: .9;
        }

    a {
        text-decoration: none;
    }

    /* Responsive Styles */
    @@media (max-width: 600px) {
        img {
            width: 25px;
        }

        .button {
            padding: 8px;
            margin: 10px;
            width: 40px;
        }

        a:hover {
            width: 100px;
        }

        .logout {
            font-size: .7em;
            right: -12px;
            bottom: -8px;
        }
    }
</style>


<MudToolBar Style="border-bottom:solid gray 0.5px;">
    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
    <MudText Align="Align.Left"><b>POS</b></MudText>
    <MudSpacer />
    <div class="navigation">
        <a class="button" href="">
            <img src="cashier.png">
            <div class="logout" style="color:black">LOGOUT</div>
        </a>
    </div>
</MudToolBar>


@if (p == null || p.Length == 0)
{
    <div class="d-flex justify-content-center my-4" style="padding-top:300px;">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row">
            <!-- Left Column (Product List) -->
            <div class="col-md-6" style="max-height: 650px; overflow-y: scroll;">
                <div class="row row-cols-1 row-cols-md-3 g-4">
                    @foreach (var product in p.Take(currentIndex))
                    {
                        <div class="col">
                            <div class="card h-100">
                                <!-- Product Image -->
                                <img src="data:image/bmp;base64, @(Convert.ToBase64String(product.photo))" class="card-img-top" alt="@product.name">

                                <div class="card-body">
                                    <!-- Product Name -->
                                    <h4 class="card-title">@product.name</h4>

                                    <!-- Product Code -->
                                    <h5 class="card-subtitle">@product.code</h5>

                                    <!-- Product Price -->
                                    <p class="price">₱@product.price</p>

                                    <!-- Product Status -->
                                    @if (product.status == "Available")
                                    {
                                        <span class="chip" style="background-color: #2ecc71; color: white;">@product.status</span>
                                    }
                                    else
                                    {
                                        <span class="chip" style="background-color: #e74c3c; color: white;">@product.status</span>
                                    }

                                    <!-- Add to Cart Button -->
                                    <MudNumericField T="int"
                                                     Variant="Variant.Outlined"
                                                     Margin="Margin.Dense"
                                                     @bind-Value="_prod.qty" />

                                    @if (product.status == "Available")
                                    {
                                        <MudFab StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                                Label="Add to Cart"
                                                Size="Size.Small"
                                                Color="Color.Primary"
                                                @onclick="(e => AddToCart(product.code))"
                                                style="font-size: 12px; margin-top: 10px;" />
                                    }
                                    else
                                    {
                                        <MudFab StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                                Label="Add to Cart"
                                                Size="Size.Small"
                                                Disabled
                                                Color="Color.Primary"
                                                style="font-size: 12px; margin-top: 10px;" />
                                    }

                                </div>
                            </div>

                        </div>

                    }
                </div>

                @if (currentIndex < p.Length)
                {
                    <div class="text-center mt-3">
                        <MudButton Disabled="@_loading" OnClick="@loadMore" Variant="Variant.Filled" Color="Color.Secondary">
                            @if (_loading)
                            {
                                <div class="loader"></div>
                            }
                            else
                            {
                                <MudText>Load More</MudText>
                            }
                        </MudButton>
                    </div>
                }
            </div>

            <!-- Right Column (Cart and Summary) -->
            <div class="col-md-6 mt-5">
                <div class="container">
                    <MudCard Elevation="1">
                        <MudToolBar>
                            <MudTextField @bind-Value="_temp.code"
                                          Placeholder="Input product code here..."
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"
                                          @onkeypress="HandleKeyPress"
                                          AutoFocus @ref="inputElement">
                            </MudTextField>
                        </MudToolBar>
                        @if (t != null && t.Any()){
                            <MudTable Class="ma-5" Dense="true" Elevation="0"
                                      Hover="true" Items="@t" HorizontalScrollbar="true"
                                      FixedHeader="@fixed_header" FixedFooter="@fixed_footer"
                                      Height="@(fixed_header || fixed_footer ? "460px" : "")">
                                <HeaderContent>
                                    <MudTh>Product</MudTh>
                                    <MudTh>Price</MudTh>
                                    <MudTh>Qty</MudTh>
                                    <MudTh>SubTotal</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Product Name">@context.name</MudTd>
                                    <MudTd DataLabel="Price">@context.price</MudTd>
                                    <MudTd>
                                        <MudNumericField T="int"
                                                         Variant="Variant.Outlined"
                                                         Margin="Margin.Dense"
                                                         Style="width:60px; height:30px;"
                                                         Value="@context.quantity"
                                                         ValueChanged="@((_value) => UpdateQuantity(context.tempID, _value))"
                                                         Immediate="true" />
                                    </MudTd>
                                    <MudTd DataLabel="Subtotal">₱@context.total</MudTd>
                                    <MudTd>
                                        <MudIconButton Icon="@Icons.Material.Filled.Close"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       @onclick="(e => DeleteTemp(context.tempID))" />
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                        else{
                            <MudText Align="Align.Center">No Transactions Found</MudText>
                        }
                        <MudToolBar>
                            <MudSpacer />
                            <MudText Typo="Typo.h6" Align="Align.Right">Total: <u>₱@_total</u></MudText>
                        </MudToolBar>
                    </MudCard>
                </div>

                <!-- Print Status -->
                <div>
                    @if (JSPrintManager.Status == JSPMWSStatus.Open)
                    {
                        <span class="badge badge-success">
                            <i class="fa fa-check" /> Open
                        </span>
                    }
                    else if (JSPrintManager.Status == JSPMWSStatus.Closed)
                    {
                        <span class="badge badge-danger">
                            <i class="fa fa-exclamation-circle" /> Closed!
                        </span>
                        <div>
                            <strong>JSPrintManager (JSPM) App</strong> is not installed or not running!
                            <a href="https://neodynamic.com/downloads/jspm" target="_blank">Download JSPM Client App...</a>
                        </div>
                    }
                </div>

                @if (JSPrintManager.Status == JSPMWSStatus.Open && JSPrintManager.Printers == null)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border text-info" role="status">
                            <span class="sr-only">Please wait...</span>
                        </div>
                        <strong><em>Getting local printers...</em></strong>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    bool fixed_header = true;
    bool fixed_footer = false;
    private products[] p;
    private temp[]? t;
    private MudTextField<string>? inputElement;
    [Parameter]
    public products _prod { get; set; } = new products();
    public temp _temp { get; set; } = new temp();
    private int currentIndex = 12;
    private const int PageSize = 12;
    private bool _loading = false;
    private string txtsearch { get; set; } = string.Empty;
    public double _total { get; set; } = 0;
    private int _value { get; set; }
    private int _qty { get; set; }
   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTemp();
            await LoadProduct();
            await RegisterKeyDown();
            await Total();
        }
    }

    public async Task Total()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Temp/Total");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                _total = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs args)
    {
        string clipboardText = await JS.InvokeAsync<string>("navigator.clipboard.readText");
        string result = clipboardText.Trim();
        if (args.Key == "Enter")
        {
            await Submit();
        }
    }
    private async Task Submit()
    {
        try
        {
            var _t = new temp
                {
                    code = _temp.code,
                    quantity = 1
                };

            using (HttpClient client2 = new HttpClient())
            {
                client2.BaseAddress = new Uri($"{Nav.BaseUri}");
                var jsonBody = JsonConvert.SerializeObject(_t);
                HttpContent requestBody = new StringContent(jsonBody);
                requestBody.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client2.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await Loc.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client2.PostAsync("api/Temp/AddTemp", requestBody);

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);

                    if (i > 0)
                    {
                        StateHasChanged();
                        await LoadTemp();
                        await JS.InvokeVoidAsync("document.activeElement.blur");
                        await Clear();
                        await inputElement.FocusAsync();
                    }
                }
                else
                {
                    StateHasChanged();
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    await JS.InvokeVoidAsync("document.activeElement.blur");
                    await Clear();
                    await inputElement.FocusAsync();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task AddToCart(string code)
    {
        try
        {
            var _t = new temp
                {
                     code = code,
                     quantity = _prod.qty,
                     date = DateTime.Now
                };

            using (HttpClient client2 = new HttpClient())
            {
                client2.BaseAddress = new Uri($"{Nav.BaseUri}");
                var jsonBody = JsonConvert.SerializeObject(_t);
                HttpContent requestBody = new StringContent(jsonBody);
                requestBody.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client2.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await Loc.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client2.PostAsync("api/Temp/AddTemp", requestBody);

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);

                    if (i > 0)
                    {
                        StateHasChanged();
                        await LoadTemp();
                    }
                }
                else
                {
                    StateHasChanged();
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task UpdateQuantity(int tempID, int quantity)
    {
        try
        {
            // Create a new 'temp' object with the provided tempID and quantity
            var _t = new temp
                {
                    tempID = tempID,  // Use the passed tempID
                    quantity = quantity // Use the updated quantity
                };

            using (HttpClient client2 = new HttpClient())
            {
                client2.BaseAddress = new Uri($"{Nav.BaseUri}");
                var jsonBody = JsonConvert.SerializeObject(_t);
                HttpContent requestBody = new StringContent(jsonBody);
                requestBody.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client2.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await Loc.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client2.PutAsync("api/Temp/UpdateTemp", requestBody);

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);

                    if (i > 0)
                    {
                        StateHasChanged();
                        await LoadTemp();
                        await Total();
                    }
                }
                else
                {
                    StateHasChanged();
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception if necessary
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteTemp(int tempID)
    {
        try
        {

            var _t = new temp
                {
                    tempID = tempID,  // Use the passed tempID
                };

            using (HttpClient client2 = new HttpClient())
            {
                client2.BaseAddress = new Uri($"{Nav.BaseUri}");
                var jsonBody = JsonConvert.SerializeObject(_t);
                HttpContent requestBody = new StringContent(jsonBody);
                requestBody.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client2.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await Loc.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client2.PostAsync("api/Temp/DeleteTemp", requestBody);

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    int i = JsonConvert.DeserializeObject<int>(responseContent);

                    if (i > 0)
                    {
                        StateHasChanged();
                        await LoadTemp();
                        await Total();
                    }
                }
                else
                {
                    StateHasChanged();
                    SnackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception if necessary
            SnackBar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }



    private async Task Clear()
    {
        _temp.code = null;
    }

    private async Task LoadProduct()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var response = await client.GetAsync($"api/Product/Products");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(1000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    p = JsonConvert.DeserializeObject<products[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task<IEnumerable<products>> GetProduct(string value, CancellationToken token)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await Loc.GetItemAsStringAsync("token"));
        var p = await httpClient.GetFromJsonAsync<List<products>>($"api/Product/SProduct?s={value}");
        return p;
    }

    private async void loadMore()
    {
        _loading = true;
        await Task.Delay(1000);
        currentIndex = Math.Min(currentIndex + PageSize, p.Length);
        StateHasChanged();
    }
    public async Task Search()
    {
        if (string.IsNullOrWhiteSpace(txtsearch))
        {
            try
            {
                using (var client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"{Nav.BaseUri}");
                    var response = await client.GetAsync($"api/Product/Products");
                    if (response.IsSuccessStatusCode)
                    {
                        await Task.Delay(1000);
                        var contentResponse = await response.Content.ReadAsStringAsync();
                        p = JsonConvert.DeserializeObject<products[]>(contentResponse);
                        StateHasChanged();
                    }
                    else
                    {
                        // Handle error
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle exception
            }
        }
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Product/Search?search={txtsearch}");
            if (response.IsSuccessStatusCode)
            {
                string contentrespose = await response.Content.ReadAsStringAsync();
                p = JsonConvert.DeserializeObject<products[]>(contentrespose);
                StateHasChanged();
            }
            else
            {
                // Handle error
            }
        }
    }


    //Print Receipt
    // JavaScript function to call DoSomething when Shift + P is pressed
    private async Task RegisterKeyDown()
    {
        await JS.InvokeVoidAsync("registerShortcut", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ExecuteShortcut()
    {
        DoPrint();
    }

    // An Installed Printer instance
    private InstalledPrinter MyPrinter { get; set; } = new();
    // Use default printer?
    private bool UseDefaultPrinter = true;

    // Printing...
    private async Task LoadTemp()
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var response = await client.GetAsync($"api/Temp/Temp");
                if (response.IsSuccessStatusCode)
                {
                    await Task.Delay(1000);
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    t = JsonConvert.DeserializeObject<temp[]>(contentResponse);
                    StateHasChanged();
                }
                else
                {
                    // Handle error
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async void DoPrint()
    {
        // Check if JSPM Client App is up and running
        if (JSPrintManager.Status == JSPMWSStatus.Open)
        {
            // Create a ClientPrintJob
            var cpj = new ClientPrintJob();
            // Set target Printer
            cpj.ClientPrinter = UseDefaultPrinter ? new DefaultPrinter() : MyPrinter;

            // Create ESC/POS commands
            char esc = (char)0x1B; // ESC byte in hex notation
            char newLine = (char)0x0A; // LF byte in hex notation
            string cmds = esc + "@"; // Initializes the printer (ESC @)

            // Set smaller font size (approximately size 8)
            cmds += esc + "!" + (char)0x01; // Condensed mode for small font size

            // Header
            cmds += "DURIAN GARDEN" + newLine;
            cmds += "Product       Qty   Price  Total" + newLine;
            cmds += "--------------------------------" + newLine;

            // Load and print products
            await LoadTemp();
            if (t != null)
            {
                foreach (var temp in t)
                {
                    cmds += $"{temp.name,-12} {temp.quantity,3} {temp.price,7:F2} {temp.total,7:F2}" + newLine;
                }
            }

            // Print timestamp
            cmds += newLine + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + newLine;

            // Set the RAW commands to send to the printer
            cpj.PrinterCommands = cmds;

            // Send print job
            JSPrintManager.SendClientPrintJob(cpj);
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Handle OnGetPrinters event...
            JSPrintManager.OnGetPrinters += () =>
            {
                if (JSPrintManager.Printers != null &&
                    JSPrintManager.Printers.Length > 0)
                {
                    // Display installed printers...
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No printers found...");
                }

            };

            // Handle OnStatusChanged event to detect any WSS status change
            JSPrintManager.OnStatusChanged += () =>
            {
                StateHasChanged();

                // Status = Open means that JSPM Client App is up and running!
                if (JSPrintManager.Status == JSPMWSStatus.Open)
                {
                    //Try getting local printers...
                    JSPrintManager.TryGetPrinters();
                }
            };

            // Start WebSocket comm
            JSPrintManager.Start();
        }

        base.OnAfterRender(firstRender);
    }

}
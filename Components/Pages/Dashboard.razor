@page "/dashboard"
@inject NavigationManager Nav
@inject HttpClient Http
@inject ILocalStorageService Loc
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard</PageTitle>

<div class="row">
    <div class="col-12 col-md-6">

        <MudCard Class="dashboard-card" Style="background-color:#30BFC1">
            <MudCardContent>
                <MudText Class="dashboard-title" Size="5">
                    Today's Sales
                </MudText>
                <MudCardContent>
                    <MudText Style="font-size:30px; font-weight:bold">₱@todaySales</MudText>
                </MudCardContent>
            </MudCardContent>
        </MudCard>
    </div>

    <div class="col-12 col-md-6">
        <MudCard Class="dashboard-card" Style="background-color:#FEAD46">
            <MudCardContent>
                <MudText Class="dashboard-title" Size="5">
                    Monthly Sales
                </MudText>
                <MudCardContent>
                    <MudText Style="font-size:30px; font-weight:bold">₱@monthSales</MudText>
                </MudCardContent>
            </MudCardContent>
        </MudCard>
    </div>
</div>
<br />

<div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="600px" ChartOptions="@Options" />
</div>


@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();
    public double todaySales { get; set; } = 0;
    public double monthSales { get; set; } = 0;
    public double monthlySales { get; set; } = 0;
    private purchase[]? p;
    public string role { get; set; } = "";

    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    public async Task GetTodaySales()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Purchase/GetTodaySales");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                todaySales = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }

    public async Task GetMonthlySales()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Purchase/GetMonthlySales");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                var salesData = JsonConvert.DeserializeObject<purchase[]>(contentResponse);

                // Loop through the response data and assign total_sales to the Series data
                var monthlySales = salesData.Select(x => x.total_sales).ToArray();
                Series = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Monthly Sales",
                    Data = monthlySales
                }
            };

                StateHasChanged(); // To refresh the UI
            }
        }
    }

    public async Task GetMonthSales()
    {
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage response = await client.GetAsync($"api/Purchase/GetMonthSales");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                monthSales = JsonConvert.DeserializeObject<double>(contentResponse);
                StateHasChanged();
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            role = await Loc.GetItemAsStringAsync("role");
        }
    }
    protected override async Task OnInitializedAsync()
    {
       
        if (role == "Cashier")
        {
            Nav.NavigateTo("/counter");
        }

        await GetTodaySales();
        await GetMonthSales();
        await GetMonthlySales();
        StateHasChanged();
    }
}